#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# core-automation documentation build configuration file, created by
# sphinx-quickstart on Fri Oct 20 16:22:15 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

import sys
import os

# import os
__version__ = "0.1.2-pre.5+cf10478"

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from my_pygments_style import MyCustomStyle  # noqa: F401, E402

base = os.path.abspath(os.path.join(os.path.abspath(__file__), "..", "..", "..", ".."))

package_list = [
    "sck-core-framework",
    "sck-core-db",
    "sck-core-execute",
    "sck-core-report",
    "sck-core-deployspec",
    "sck-core-component",
    "sck-core-invoker",
    "sck-core-organization",
    "sck-core-codecommit",
    "sck-core-api",
    "sck-core-cli",
]

# Using a lambda function to insert paths
print("Inserting module paths:")
for p in package_list:
    mp = os.path.join(base, p)
    if os.path.exists(mp):
        sys.path.insert(0, mp)
        print(f"  {mp}")
    else:
        print(f"  WARNING: Path does not exist: {mp}")

print("Resulting System Paths:")
for p in sys.path:
    print(p)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.napoleon",
    # "sphinxcontrib.httpdomain",
    # "sphinxcontrib.openapi",
    "sphinx.ext.viewcode",
    "sphinx.ext.todo",
    # "sphinx.ext.githubpages",
    "sphinx_rtd_theme",
    "myst_parser",
    # "sphinx.ext.intersphinx",
    # "sphinx_autodoc_typehints",
]

# Napoleon settings for Google style
napoleon_google_docstring = True
napoleon_numpy_docstring = False  # Disable NumPy style
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True

autosummary_generate = True
# napoleon_preprocess_types = False
# napoleon_type_aliases = None
napoleon_attr_annotations = False

autodoc_default_options = {
    "members": True,
    "undoc-members": True,
    "show-inheritance": True,
}

# Additional autodoc configuration to exclude tests
autodoc_mock_imports = []
autodoc_member_order = "bysource"

# Autosummary configuration to prevent duplicates
autosummary_generate = False
autosummary_generate_overwrite = False
autosummary_imported_members = False


# Function to skip test modules and functions
def skip_test_modules(app, what, name, obj, skip, options):
    """Skip documentation for test modules and test functions."""
    if what == "module" and ("test" in name or name.startswith("tests")):
        return True
    if what == "function" and (name.startswith("test_") or "_test" in name):
        return True
    return skip


# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]
source_suffix = [".rst", ".md"]

# Suppress specific warnings
suppress_warnings = [
    "autodoc",  # Ignore all autodoc warnings including duplicate object descriptions
    "toc",  # Ignore toctree warnings
]

# Setup logging to filter duplicate warnings
import logging


class DuplicateFilter(logging.Filter):
    def filter(self, record):
        return "duplicate object description" not in record.getMessage()


# Add the filter to the sphinx logger
sphinx_logger = logging.getLogger("sphinx")
sphinx_logger.addFilter(DuplicateFilter())

# The master toctree document.
master_doc = "index"

# The short X.Y version.
version = __version__

# The full version, including alpha/beta/rc tags.
release = "1"

# Show / Hide 'Created using Sphinx' in the footer of each page
html_show_sphinx = False
html_show_copyright = False

# General information about the project.
project = "SCK Core Automation"

author = "EITS"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    # Exclude all test directories from all sck modules
    "**/tests/**",
    "**/test_*.py",
    "**/*_test.py",
    # Exclude any dev/example directories
    "**/dev/**",
    "**/examples/**",
]


# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = "monokai"
pygments_style = "my_pygments_style.MyCustomStyle"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'
html_theme = "sphinx_rtd_theme"
# html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# sticky_navigation = True

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "navigation_depth": -1,  # Disable navigation depth
    "collapse_navigation": True,  # Collapse navigation by default
    "sticky_navigation": False,  # Disable sticky navigation
    "includehidden": False,  # Don't include hidden toctree entries
    "titles_only": True,  # Show only titles in navigation
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = [
    "custom.css",
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#    '**': [
#        'about.html',
#        'navigation.html',
#        'relations.html',  # needs 'show_related': True theme option to display
#        'searchbox.html',
#        'donate.html',
#    ]
# }
#
# html_show_sourcelink = False


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "core-docs"


# -- Options for LaTeX output ---------------------------------------------

latex_elements: dict = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_document: list[tuple] = [
    (
        master_doc,
        "core-automation.tex",
        "core-automation Documentation",
        "EITS",
        "manual",
    ),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages: list[tuple] = [(master_doc, "core-automation", "core-automation Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents: list[tuple] = [
    (
        master_doc,
        "core-automation",
        "core-automation Documentation",
        author,
        "core-automation",
        "One line description of project.",
        "Miscellaneous",
    ),
]


def setup(app):
    """Sphinx setup function to register custom autodoc skip handlers."""
    app.connect("autodoc-skip-member", skip_test_modules)


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']


# # Add custom CSS file
# def setup(app):
#     app.add_css_file("custom.css")
